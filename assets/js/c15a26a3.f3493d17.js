(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{88:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return i})),r.d(t,"metadata",(function(){return c})),r.d(t,"toc",(function(){return l})),r.d(t,"default",(function(){return s}));var a=r(3),n=r(8),o=(r(0),r(96)),i={title:"^0.13.0 to ^0.14.0"},c={unversionedId:"migration/0.13.0_to_0.14.0",id:"migration/0.13.0_to_0.14.0",isDocsHomePage:!1,title:"^0.13.0 to ^0.14.0",description:"With the release of the version 0.14.0 of Riverpod, the syntax for using [StateNotifierProvider] changed",source:"@site/docs/migration/0.13.0_to_0.14.0.mdx",slug:"/migration/0.13.0_to_0.14.0",permalink:"/docs/migration/0.13.0_to_0.14.0",editUrl:"https://github.com/y-moriya/river_pod/edit/master/website/docs/migration/0.13.0_to_0.14.0.mdx",version:"current",sidebar:"Sidebar",previous:{title:".autoDispose",permalink:"/docs/concepts/modifiers/auto_dispose"}},l=[{value:"The changes",id:"the-changes",children:[]},{value:"Using the migration tool to automatically upgrade your projects to the new syntax",id:"using-the-migration-tool-to-automatically-upgrade-your-projects-to-the-new-syntax",children:[{value:"Installing the command line",id:"installing-the-command-line",children:[]},{value:"Usage",id:"usage",children:[]}]}],p={toc:l};function s(e){var t=e.components,r=Object(n.a)(e,["components"]);return Object(o.b)("wrapper",Object(a.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"With the release of the version ",Object(o.b)("inlineCode",{parentName:"p"},"0.14.0")," of Riverpod, the syntax for using ",Object(o.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/StateNotifierProvider-class.html"},"StateNotifierProvider")," changed",Object(o.b)("br",{parentName:"p"}),"\n","(see ",Object(o.b)("a",{parentName:"p",href:"https://github.com/rrousselGit/river_pod/issues/341"},"https://github.com/rrousselGit/river_pod/issues/341")," for the explanation)."),Object(o.b)("p",null,"For the entire article, consider the following ",Object(o.b)("a",{parentName:"p",href:"https://pub.dev/documentation/state_notifier/latest/state_notifier/StateNotifier-class.html"},"StateNotifier"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-dart"},"class MyModel {}\n\nclass MyStateNotifier extends StateNotifier<MyModel> {\n  MyStateNotifier(): super(MyModel());\n}\n")),Object(o.b)("h2",{id:"the-changes"},"The changes"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},Object(o.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/StateNotifierProvider-class.html"},"StateNotifierProvider")," takes an extra generic parameter, which should be\nthe type of the state of your ",Object(o.b)("a",{parentName:"p",href:"https://pub.dev/documentation/state_notifier/latest/state_notifier/StateNotifier-class.html"},"StateNotifier"),"."),Object(o.b)("p",{parentName:"li"},"Before:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-dart"},"final provider = StateNotifierProvider<MyStateNotifier>((ref) {\n  return MyStateNotifier();\n});\n")),Object(o.b)("p",{parentName:"li"},"After:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-dart"},"final provider = StateNotifierProvider<MyStateNotifier, MyModel>((ref) {\n  return MyStateNotifier();\n});\n"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"to obtain the ",Object(o.b)("a",{parentName:"p",href:"https://pub.dev/documentation/state_notifier/latest/state_notifier/StateNotifier-class.html"},"StateNotifier"),", you should now read ",Object(o.b)("inlineCode",{parentName:"p"},"myProvider.notifier")," instead of just ",Object(o.b)("inlineCode",{parentName:"p"},"myProvider"),":"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-dart"},"Widget build(BuildContext context, ScopedReader watch) {\n  MyStateNotifier notifier = watch(provider);\n}\n")),Object(o.b)("p",{parentName:"li"},"After:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-dart"},"Widget build(BuildContext context, ScopedReader watch) {\n  MyStateNotifier notifier = watch(provider.notifier);\n}\n"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"to listen to the state of the ",Object(o.b)("a",{parentName:"p",href:"https://pub.dev/documentation/state_notifier/latest/state_notifier/StateNotifier-class.html"},"StateNotifier"),", you should now read ",Object(o.b)("inlineCode",{parentName:"p"},"myProvider")," instead of ",Object(o.b)("inlineCode",{parentName:"p"},"myProvider.state"),":"),Object(o.b)("p",{parentName:"li"},"Before:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-dart"},"Widget build(BuildContext context, ScopedReader watch) {\n  MyModel state = watch(provider.state);\n}\n")),Object(o.b)("p",{parentName:"li"},"After:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-dart"},"Widget build(BuildContext context, ScopedReader watch) {\n  MyModel state = watch(provider);\n}\n")))),Object(o.b)("h2",{id:"using-the-migration-tool-to-automatically-upgrade-your-projects-to-the-new-syntax"},"Using the migration tool to automatically upgrade your projects to the new syntax"),Object(o.b)("p",null,"With the version 0.14.0 came the release of a command line tool for Riverpod,\nwhich can help you migrate your projects."),Object(o.b)("h3",{id:"installing-the-command-line"},"Installing the command line"),Object(o.b)("p",null,"To install the migration tool, do:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-sh"},"dart pub global activate riverpod_cli\n")),Object(o.b)("p",null,"You should now be able to do:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-dart"},"riverpod --help\n")),Object(o.b)("h3",{id:"usage"},"Usage"),Object(o.b)("p",null,"Now that the command line is installed, we can start using it."),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"First, open the project you want to migrate in your terminal."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Do not")," upgrade Riverpod.",Object(o.b)("br",{parentName:"li"}),"The migration tool will upgrade the version of Riverpod for you."),Object(o.b)("li",{parentName:"ul"},"Make sure that your project does not contain errors."),Object(o.b)("li",{parentName:"ul"},"Execute:",Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-sh"},"riverpod migrate\n")))),Object(o.b)("p",null,"The tool will then analyse your project and suggest changes. For example you may see:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-diff"},"Widget build(BuildContext context, ScopedReader watch) {\n-  MyModel state = watch(provider.state);\n+  MyModel state = watch(provider);\n}\n\nAccept change (y = yes, n = no [default], A = yes to all, q = quit)? \n")),Object(o.b)("p",null,"To accept the change, simply press ",Object(o.b)("kbd",null,"y"),". Otherwise to reject it, press ",Object(o.b)("kbd",null,"n"),"."))}s.isMDXComponent=!0},96:function(e,t,r){"use strict";r.d(t,"a",(function(){return b})),r.d(t,"b",(function(){return m}));var a=r(0),n=r.n(a);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function c(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},o=Object.keys(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)r=o[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=n.a.createContext({}),s=function(e){var t=n.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):c(c({},t),e)),r},b=function(e){var t=s(e.components);return n.a.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},u=n.a.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,i=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=s(r),u=a,m=b["".concat(i,".").concat(u)]||b[u]||d[u]||o;return r?n.a.createElement(m,c(c({ref:t},p),{},{components:r})):n.a.createElement(m,c({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=u;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var p=2;p<o;p++)i[p]=r[p];return n.a.createElement.apply(null,i)}return n.a.createElement.apply(null,r)}u.displayName="MDXCreateElement"}}]);