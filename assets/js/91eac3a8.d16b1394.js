(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{83:function(e,t,r){"use strict";r.r(t),r.d(t,"frontMatter",(function(){return o})),r.d(t,"metadata",(function(){return s})),r.d(t,"toc",(function(){return c})),r.d(t,"default",(function(){return d}));var a=r(3),n=r(8),i=(r(0),r(96)),o={title:"Providers"},s={unversionedId:"concepts/providers",id:"concepts/providers",isDocsHomePage:!1,title:"Providers",description:'Now that we have installed [Riverpod], let\'s talk about "providers".',source:"@site/docs/concepts/providers.mdx",slug:"/concepts/providers",permalink:"/river_pod/docs/concepts/providers",editUrl:"https://github.com/y-moriya/river_pod/edit/master/website/docs/concepts/providers.mdx",version:"current",sidebar:"Sidebar",previous:{title:"Testing",permalink:"/river_pod/docs/cookbooks/testing"},next:{title:"Reading a provider",permalink:"/river_pod/docs/concepts/reading"}},c=[{value:"Why use providers?",id:"why-use-providers",children:[]},{value:"Creating a provider",id:"creating-a-provider",children:[]},{value:"Performing actions before the state destruction",id:"performing-actions-before-the-state-destruction",children:[]},{value:"Provider Modifiers",id:"provider-modifiers",children:[]}],p={toc:c};function d(e){var t=e.components,r=Object(n.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},p,r,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Now that we have installed ",Object(i.b)("a",{parentName:"p",href:"https://github.com/rrousselgit/river_pod"},"Riverpod"),', let\'s talk about "providers".'),Object(i.b)("p",null,"Providers are the most important part of a ",Object(i.b)("a",{parentName:"p",href:"https://github.com/rrousselgit/river_pod"},"Riverpod")," application.",Object(i.b)("br",{parentName:"p"}),"\n","A provider is an object that encapsulate a piece of state and allows listening\nto that state."),Object(i.b)("h2",{id:"why-use-providers"},"Why use providers?"),Object(i.b)("p",null,"By wrapping a piece of state in a provider, this:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Allows easily accessing that state in multiple locations.",Object(i.b)("br",{parentName:"p"}),"\n","Providers are a complete replacement for patterns like Singletons,\nService Locators, Dependency Injection or InheritedWidgets.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Simplifies combining this state with others.",Object(i.b)("br",{parentName:"p"}),"\n","Ever struggled merging multiple objects into one? This scenario is built\ndirectly inside providers, with a simple syntax.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Enables performance optimisations.",Object(i.b)("br",{parentName:"p"}),"\n","Whether for filtering widget rebuilds or for caching expensive state computations;\nproviders ensure that only what is impacted by a state change is recomputed.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Increases the testability of your application.",Object(i.b)("br",{parentName:"p"}),"\n","With providers, you do not need complex ",Object(i.b)("inlineCode",{parentName:"p"},"setUp"),"/",Object(i.b)("inlineCode",{parentName:"p"},"tearDown")," steps. Furthermore,\nany provider can be overridden to behave differently during test, which\nallows easily testing a very specific behavior.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Easily integrate with advanced features, such as logging or pull-to-refresh."))),Object(i.b)("h2",{id:"creating-a-provider"},"Creating a provider"),Object(i.b)("p",null,"Providers come in many variants, but they all work the same way."),Object(i.b)("p",null,"The most common usage is to declare them as global constant like so:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-dart"},"final myProvider = Provider((ref) {\n  return MyValue();\n});\n")),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"Do not be afraid by the global aspect of providers.",Object(i.b)("br",{parentName:"p"}),"\n","Providers are fully immutable. Declaring a provider is no different from declaring\na function, and is testable and maintainable."))),Object(i.b)("p",null,"This snippet consists of three components:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"final myProvider"),", the declaration of a variable.",Object(i.b)("br",{parentName:"p"}),"\n","This variable is what we will use in the future to read the state of our provider.\nIt should always be immutable.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("inlineCode",{parentName:"p"},"Provider"),", the provider that we decided to use.",Object(i.b)("br",{parentName:"p"}),"\n",Object(i.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/Provider-class.html"},"Provider")," is the most basic of all providers. It exposes an object that never\nchanges.",Object(i.b)("br",{parentName:"p"}),"\n","We could replace ",Object(i.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/Provider-class.html"},"Provider")," with other providers like ",Object(i.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/StreamProvider-class.html"},"StreamProvider")," or\n",Object(i.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/StateNotifierProvider-class.html"},"StateNotifierProvider"),", to change how the value is interacted with.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"A function that creates the shared state.",Object(i.b)("br",{parentName:"p"}),"\n","That function will always receive an object called ",Object(i.b)("inlineCode",{parentName:"p"},"ref")," as a parameter. This object\nallows us to read other providers or to perform some operations when the state\nof our provider will be destroyed."))),Object(i.b)("p",null,"The type of the object created by the function passed to a provider depends on\nthe provider used.",Object(i.b)("br",{parentName:"p"}),"\n","For example, the function of a ",Object(i.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/Provider-class.html"},"Provider")," can create any object.\nOn the other hand, ",Object(i.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/StreamProvider-class.html"},"StreamProvider"),"'s callback will be expected to return a ",Object(i.b)("a",{parentName:"p",href:"https://api.dart.dev/stable/2.8.4/dart-async/Stream-class.html"},"Stream"),"."),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"You can declare as many providers as you want without limitations.",Object(i.b)("br",{parentName:"p"}),"\n","As opposed to when using ",Object(i.b)("inlineCode",{parentName:"p"},"package:provider"),", in ",Object(i.b)("a",{parentName:"p",href:"https://github.com/rrousselgit/river_pod"},"Riverpod"),' we can have two\nproviders expose a state of the same "type":'),Object(i.b)("pre",{parentName:"div"},Object(i.b)("code",{parentName:"pre",className:"language-dart"},"final cityProvider = Provider((ref) => 'London');\nfinal countryProvider = Provider((ref) => 'England');\n")),Object(i.b)("p",{parentName:"div"},"The fact that both providers create a ",Object(i.b)("inlineCode",{parentName:"p"},"String")," does not cause any problem."))),Object(i.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"For providers to work, you must add ",Object(i.b)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ProviderScope-class.html"},"ProviderScope")," at the root of your\nFlutter applications:"),Object(i.b)("pre",{parentName:"div"},Object(i.b)("code",{parentName:"pre",className:"language-dart"},"void main() {\n  runApp(ProviderScope(child: MyApp()));\n}\n")))),Object(i.b)("h2",{id:"performing-actions-before-the-state-destruction"},"Performing actions before the state destruction"),Object(i.b)("p",null,"In some cases, the state of a provider may get destroyed or re-created.\nA common use-case in those situations is to perform a cleanup before the state of a provider\nis destroyed, such as closing a ",Object(i.b)("inlineCode",{parentName:"p"},"StreamController"),"."),Object(i.b)("p",null,"This is done using the ",Object(i.b)("inlineCode",{parentName:"p"},"ref")," object, which is passed to the callback of all providers, using its ",Object(i.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/ProviderRefBase/onDispose.html"},"onDispose")," method."),Object(i.b)("p",null,"The following example uses ",Object(i.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/ProviderRefBase/onDispose.html"},"onDispose")," to close a ",Object(i.b)("inlineCode",{parentName:"p"},"StreamController"),":"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-dart"},"final example = StreamProvider.autoDispose((ref) {\n  final streamController = StreamController<int>();\n\n  ref.onDispose(() {\n    // Closes the StreamController when the state of this provider is destroyed.\n    streamController.close();\n  });\n\n  return streamController.stream;\n});\n")),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"Depending on the provider used, it may already take care of the clean-up process.",Object(i.b)("br",{parentName:"p"}),"\n","For example, ",Object(i.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/StateNotifierProvider-class.html"},"StateNotifierProvider")," will call the ",Object(i.b)("inlineCode",{parentName:"p"},"dispose")," method of a ",Object(i.b)("inlineCode",{parentName:"p"},"StateNotifier"),"."))),Object(i.b)("h2",{id:"provider-modifiers"},"Provider Modifiers"),Object(i.b)("p",null,"All Providers have a built-in way to add extra functionalities to your different providers."),Object(i.b)("p",null,"They may add new features to the ",Object(i.b)("inlineCode",{parentName:"p"},"ref")," object or change slightly how the provider\nis consumed.",Object(i.b)("br",{parentName:"p"}),"\n","Modifiers can be used on all providers, with a syntax similar to named constructor:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-dart"},"final myAutoDisposeProvider = StateProvider.autoDispose<String>((ref) => 0);\nfinal myFamilyProvider = Provider.family<String, int>((ref, id) => '$id');\n")),Object(i.b)("p",null,"At the moment, there are two modifiers available:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"/docs/concepts/modifiers/auto_dispose"},Object(i.b)("inlineCode",{parentName:"a"},".autoDispose")),", which will make the provider automatically destroy its state\nwhen it is no-longer listened."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("a",{parentName:"li",href:"/docs/concepts/modifiers/family"},Object(i.b)("inlineCode",{parentName:"a"},".family")),", which allows creating a provider from external parameters.")),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"A provider can use multiple modifiers at once:"),Object(i.b)("pre",{parentName:"div"},Object(i.b)("code",{parentName:"pre",className:"language-dart"},"final userProvider = FutureProvider.autoDispose.family<User, int>((ref, userId) async {\n  return fetchUser(userId);\n});\n")))),Object(i.b)("p",null,"That's it for this guide!"),Object(i.b)("p",null,"You can continue with ",Object(i.b)("a",{parentName:"p",href:"/docs/concepts/reading"},"How to read a provider"),".\nAlternatively, you can see ",Object(i.b)("a",{parentName:"p",href:"/docs/concepts/combining_providers"},"How to combine providers"),"."))}d.isMDXComponent=!0},96:function(e,t,r){"use strict";r.d(t,"a",(function(){return l})),r.d(t,"b",(function(){return v}));var a=r(0),n=r.n(a);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,a)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,a,n=function(e,t){if(null==e)return{};var r,a,n={},i=Object.keys(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||(n[r]=e[r]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)r=i[a],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(n[r]=e[r])}return n}var p=n.a.createContext({}),d=function(e){var t=n.a.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=d(e.components);return n.a.createElement(p.Provider,{value:t},e.children)},b={inlineCode:"code",wrapper:function(e){var t=e.children;return n.a.createElement(n.a.Fragment,{},t)}},m=n.a.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),l=d(r),m=a,v=l["".concat(o,".").concat(m)]||l[m]||b[m]||i;return r?n.a.createElement(v,s(s({ref:t},p),{},{components:r})):n.a.createElement(v,s({ref:t},p))}));function v(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return n.a.createElement.apply(null,o)}return n.a.createElement.apply(null,r)}m.displayName="MDXCreateElement"}}]);