(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{85:function(e,r,t){"use strict";t.r(r),t.d(r,"frontMatter",(function(){return a})),t.d(r,"metadata",(function(){return d})),t.d(r,"toc",(function(){return c})),t.d(r,"default",(function(){return p}));var n=t(3),o=t(8),i=(t(0),t(96)),a={title:"ProviderObserver"},d={unversionedId:"concepts/provider_observer",id:"concepts/provider_observer",isDocsHomePage:!1,title:"ProviderObserver",description:"[ProviderObserver] listens to the changes of a ProviderContainer.",source:"@site/docs/concepts/provider_observer.mdx",slug:"/concepts/provider_observer",permalink:"/river_pod/docs/concepts/provider_observer",editUrl:"https://github.com/y-moriya/river_pod/edit/ja_docs/website/docs/concepts/provider_observer.mdx",version:"current",sidebar:"Sidebar",previous:{title:"Combining providers",permalink:"/river_pod/docs/concepts/combining_providers"},next:{title:".family",permalink:"/river_pod/docs/concepts/modifiers/family"}},c=[{value:"Usage :",id:"usage-",children:[]}],s={toc:c};function p(e){var r=e.components,t=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},s,t,{components:r,mdxType:"MDXLayout"}),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/ProviderObserver-class.html"},"ProviderObserver")," listens to the changes of a ProviderContainer."),Object(i.b)("p",null,"To use it, extend the class ProviderObserver and override the method you like to use."),Object(i.b)("p",null,Object(i.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/ProviderObserver-class.html"},"ProviderObserver")," has four methods :"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"didAddProvider")," is called every time a provider was initialized, and the value exposed is value."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"didDisposeProvider")," is called every time A provider was disposed"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"didUpdateProvider")," is called every time my providers when they emit a notification."),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"mayHaveChanged")," is called when the dependency of a provider changed, but it is not yet sure if the computed value changes.")),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"It is possible that mayHaveChanged will be called, without didUpdateProvider being called, such as when a Provider is re-computed but returns a value == to the previous one."))),Object(i.b)("h3",{id:"usage-"},"Usage :"),Object(i.b)("p",null,"A simple use case for ",Object(i.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/ProviderObserver-class.html"},"ProviderObserver"),", is to log the changes in providers by overriding the method ",Object(i.b)("inlineCode",{parentName:"p"},"didUpdateProvider"),"."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-dart"},"// A Counter example implemented with riverpod with Logger\n\nclass Logger extends ProviderObserver {\n  @override\n  void didUpdateProvider(ProviderBase provider, Object? newValue) {\n    print('''\n{\n  \"provider\": \"${provider.name ?? provider.runtimeType}\",\n  \"newValue\": \"$newValue\"\n}''');\n  }\n}\n\nvoid main() {\n  runApp(\n    // Adding ProviderScope enables Riverpod for the entire project\n    // Adding our Logger to the list of observers\n    ProviderScope(observers: [Logger()], child: MyApp()),\n  );\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({Key? key}) : super(key: key);\n\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(home: Home());\n  }\n}\n\nfinal counterProvider = StateProvider((ref) => 0);\n\nclass Home extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Counter example')),\n      body: Center(\n        child: Consumer(builder: (context, ref, _) {\n          final count = ref.watch(counterProvider).state;\n          return Text('$count');\n        }),\n      ),\n      floatingActionButton: FloatingActionButton(\n        onPressed: () => context.read(counterProvider).state++,\n        child: const Icon(Icons.add),\n      ),\n    );\n  }\n}\n")),Object(i.b)("p",null,"Now that every time the value of our provider is updated, the logger will log it :"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre"},'I/flutter (16783): {\nI/flutter (16783):   "provider": "counter",\nI/flutter (16783):   "newValue": "Instance of \'StateController<int>\'"\nI/flutter (16783): }\n')))}p.isMDXComponent=!0},96:function(e,r,t){"use strict";t.d(r,"a",(function(){return l})),t.d(r,"b",(function(){return b}));var n=t(0),o=t.n(n);function i(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function d(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){i(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function c(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=o.a.createContext({}),p=function(e){var r=o.a.useContext(s),t=r;return e&&(t="function"==typeof e?e(r):d(d({},r),e)),t},l=function(e){var r=p(e.components);return o.a.createElement(s.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return o.a.createElement(o.a.Fragment,{},r)}},v=o.a.forwardRef((function(e,r){var t=e.components,n=e.mdxType,i=e.originalType,a=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),l=p(t),v=n,b=l["".concat(a,".").concat(v)]||l[v]||u[v]||i;return t?o.a.createElement(b,d(d({ref:r},s),{},{components:t})):o.a.createElement(b,d({ref:r},s))}));function b(e,r){var t=arguments,n=r&&r.mdxType;if("string"==typeof e||n){var i=t.length,a=new Array(i);a[0]=v;var d={};for(var c in r)hasOwnProperty.call(r,c)&&(d[c]=r[c]);d.originalType=e,d.mdxType="string"==typeof e?e:n,a[1]=d;for(var s=2;s<i;s++)a[s]=t[s];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,t)}v.displayName="MDXCreateElement"}}]);