(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{100:function(e,t,n){"use strict";var r=n(0),a=n.n(r),o=n(97),i=n(94),s=n(56),c=n.n(s);const d=37,l=39;t.a=function(e){const{lazy:t,block:n,defaultValue:s,values:p,groupId:u,className:b}=e,{tabGroupChoices:m,setTabGroupChoices:h}=Object(o.a)(),[v,f]=Object(r.useState)(s),g=r.Children.toArray(e.children),O=[];if(null!=u){const e=m[u];null!=e&&e!==v&&p.some((t=>t.value===e))&&f(e)}const j=e=>{const t=e.target,n=O.indexOf(t),r=g[n].props.value;f(r),null!=u&&(h(u,r),setTimeout((()=>{(function(e){const{top:t,left:n,bottom:r,right:a}=e.getBoundingClientRect(),{innerHeight:o,innerWidth:i}=window;return t>=0&&a<=i&&r<=o&&n>=0})(t)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(c.a.tabItemActive),setTimeout((()=>t.classList.remove(c.a.tabItemActive)),2e3))}),150))},N=e=>{var t;let n;switch(e.keyCode){case l:{const t=O.indexOf(e.target)+1;n=O[t]||O[0];break}case d:{const t=O.indexOf(e.target)-1;n=O[t]||O[O.length-1];break}}null===(t=n)||void 0===t||t.focus()};return a.a.createElement("div",{className:"tabs-container"},a.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(i.a)("tabs",{"tabs--block":n},b)},p.map((({value:e,label:t})=>a.a.createElement("li",{role:"tab",tabIndex:v===e?0:-1,"aria-selected":v===e,className:Object(i.a)("tabs__item",c.a.tabItem,{"tabs__item--active":v===e}),key:e,ref:e=>O.push(e),onKeyDown:N,onFocus:j,onClick:j},t)))),t?Object(r.cloneElement)(g.filter((e=>e.props.value===v))[0],{className:"margin-vert--md"}):a.a.createElement("div",{className:"margin-vert--md"},g.map(((e,t)=>Object(r.cloneElement)(e,{key:t,hidden:e.props.value!==v})))))}},101:function(e,t,n){"use strict";var r=n(0),a=n.n(r);t.a=function({children:e,hidden:t,className:n}){return a.a.createElement("div",{role:"tabpanel",hidden:t,className:n},e)}},158:function(e,t,n){"use strict";n.r(t),t.default=n.p+"assets/images/reading-eddc30e98d777456a442ddd5b181eb2a.svg"},76:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return l}));var r=n(3),a=n(8),o=(n(0),n(96)),i=(n(100),n(101),{title:"Reading a provider"}),s={unversionedId:"concepts/reading",id:"concepts/reading",isDocsHomePage:!1,title:"Reading a provider",description:"Before reading this guide, make sure to read about Providers first.",source:"@site/docs/concepts/reading.mdx",slug:"/concepts/reading",permalink:"/docs/concepts/reading",editUrl:"https://github.com/y-moriya/river_pod/edit/master/website/docs/concepts/reading.mdx",version:"current",sidebar:"Sidebar",previous:{title:"Providers",permalink:"/docs/concepts/providers"},next:{title:"Combining providers",permalink:"/docs/concepts/combining_providers"}},c=[{value:"Deciding what to read",id:"deciding-what-to-read",children:[]},{value:"Consuming a provider inside widgets",id:"consuming-a-provider-inside-widgets",children:[{value:"ConsumerWidget",id:"consumerwidget",children:[]},{value:"Consumer",id:"consumer",children:[]},{value:"useProvider (hooks_riverpod only)",id:"useprovider-hooks_riverpod-only",children:[]},{value:"context.read(myProvider)",id:"contextreadmyprovider",children:[]},{value:"ProviderListener",id:"providerlistener",children:[]}]},{value:"Reading a provider inside another provider",id:"reading-a-provider-inside-another-provider",children:[]},{value:"Reading a provider outside of providers using Dart only",id:"reading-a-provider-outside-of-providers-using-dart-only",children:[]}],d={toc:c};function l(e){var t=e.components,i=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},d,i,{components:t,mdxType:"MDXLayout"}),Object(o.b)("p",null,"Before reading this guide, make sure to ",Object(o.b)("a",{parentName:"p",href:"/docs/concepts/providers"},"read about Providers")," first."),Object(o.b)("p",null,"In this guide, we will see how to consume a provider."),Object(o.b)("p",null,"There are multiple ways to read a provider, which change slightly based on different\ncriterias.",Object(o.b)("br",{parentName:"p"}),"\n","Long story short, here is a decision graph to help you decide what to use to\nread a provider:"),Object(o.b)("p",null,Object(o.b)("img",{alt:"Decision graph for reading providers",src:n(158).default})),Object(o.b)("p",null,"Next, we will see each individual case and show how they work.",Object(o.b)("br",{parentName:"p"}),"\n","For this guide, consider the following provider:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-dart"},"final counterProvider = StateProvider((ref) => 0);\n")),Object(o.b)("h2",{id:"deciding-what-to-read"},"Deciding what to read"),Object(o.b)("p",null,"Depending on the provider you want to listen, you may have multiple possible\nvalues that you can listen."),Object(o.b)("p",null,"An example, consider the following ",Object(o.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/StreamProvider-class.html"},"StreamProvider"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-dart"},"final userProvider = StreamProvider<User>(...);\n")),Object(o.b)("p",null,"When reading this ",Object(o.b)("inlineCode",{parentName:"p"},"userProvider"),", you can:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"synchronously read the current state by listening to ",Object(o.b)("inlineCode",{parentName:"p"},"userProvider")," itself:"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-dart"},"Widget build(BuildContext context, WidgetRef ref) {\n  AsyncValue<User> user = ref.watch(userProvider);\n\n  return user.when(\n    loading: () => const CircularProgressIndicator(),\n    error: (error, stack) => const Text('Oops'),\n    data: (user) => Text(user.name),\n  );\n}\n"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"obtain the associated ","[Stream]",", by listening to ",Object(o.b)("inlineCode",{parentName:"p"},"userProvider.stream"),":"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-dart"},"Widget build(BuildContext context, WidgetRef ref) {\n  Stream<User> user = ref.watch(userProvider.stream);\n}\n"))),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"obtain a ","[Future]"," that resolves with the latest value emitted, by listening to ",Object(o.b)("inlineCode",{parentName:"p"},"userProvider.last"),":"),Object(o.b)("pre",{parentName:"li"},Object(o.b)("code",{parentName:"pre",className:"language-dart"},"Widget build(BuildContext context, WidgetRef ref) {\n  Future<User> user = ref.watch(userProvider.last);\n}\n")))),Object(o.b)("p",null,"For more information, refer to the documentation of each individual provider by\nconsulting the ",Object(o.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/riverpod-library.html"},"API reference"),"."),Object(o.b)("h2",{id:"consuming-a-provider-inside-widgets"},"Consuming a provider inside widgets"),Object(o.b)("p",null,"In this section, we will see how Flutter widgets can interact with providers."),Object(o.b)("h3",{id:"consumerwidget"},"ConsumerWidget"),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ConsumerWidget-class.html"},"ConsumerWidget")," is a base-class for Widgets similar to ",Object(o.b)("inlineCode",{parentName:"p"},"StatelessWidget"),", but\nthat allows you to listen to providers."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-dart",metastring:"{5}","{5}":!0},"class Home extends ConsumerWidget {\n  @override\n  Widget build(BuildContext context, WidgetRef ref) {\n    // Listens to the value exposed by counterProvider\n    int count = ref.watch(counterProvider).state;\n\n    return Scaffold(\n      appBar: AppBar(title: const Text('Counter example')),\n      body: Center(\n        child: Text('$count'),\n      ),\n    );\n  }\n}\n")),Object(o.b)("p",null,"Notice how the value of ",Object(o.b)("inlineCode",{parentName:"p"},"counterProvider")," is obtained by a function called ",Object(o.b)("inlineCode",{parentName:"p"},"watch"),".",Object(o.b)("br",{parentName:"p"}),"\n","This function is what makes ",Object(o.b)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ConsumerWidget-class.html"},"ConsumerWidget")," listen to our provider and rebuild\nwhen the value exposed changed."),Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"The ",Object(o.b)("inlineCode",{parentName:"p"},"watch")," method passed as an argument of ",Object(o.b)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ConsumerWidget-class.html"},"ConsumerWidget")," should not be called\nasynchronously, like inside ",Object(o.b)("inlineCode",{parentName:"p"},"onPressed")," or a ",Object(o.b)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/material/ElevatedButton-class.html"},"ElevatedButton"),"."),Object(o.b)("p",{parentName:"div"},"If you need to read a provider in response to a user event, see ",Object(o.b)("a",{parentName:"p",href:"#contextreadmyprovider"},"context.read(myProvider)")))),Object(o.b)("h3",{id:"consumer"},"Consumer"),Object(o.b)("p",null,Object(o.b)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/Consumer-class.html"},"Consumer")," is a ",Object(o.b)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ConsumerWidget-class.html"},"ConsumerWidget")," that you can use to optimize the performances\nof your application by rebuilding only the widgets that needs use the data."),Object(o.b)("p",null,"For example, we could update the code snippet from ",Object(o.b)("a",{parentName:"p",href:"#ConsumerWidget"},"ConsumerWidget"),"\nwe saw previously to rebuild ",Object(o.b)("strong",{parentName:"p"},"only")," the ",Object(o.b)("inlineCode",{parentName:"p"},"Text")," when the counter changes:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-dart",metastring:"{11}","{11}":!0},"class Home extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(title: const Text('Counter example')),\n      body: Center(\n        child: Consumer(\n          // Rebuild only the Text when counterProvider updates\n          builder: (context, ref, child) {\n            // Listens to the value exposed by counterProvider\n            int count = ref.watch(counterProvider).state;\n            return Text('$count');\n          },\n        ),\n      ),\n    );\n  }\n}\n")),Object(o.b)("p",null,"This example will make our UI listen to ",Object(o.b)("inlineCode",{parentName:"p"},"counterProvider")," and rebuild a ",Object(o.b)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/Text-class.html"},"Text"),"\n(and only that ",Object(o.b)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/widgets/Text-class.html"},"Text"),") when the counter changes."),Object(o.b)("h3",{id:"useprovider-hooks_riverpod-only"},"useProvider (hooks_riverpod only)"),Object(o.b)("p",null,"If you are using ",Object(o.b)("a",{parentName:"p",href:"https://github.com/rrousselGit/flutter_hooks"},"flutter_hooks"),"/",Object(o.b)("a",{parentName:"p",href:"https://pub.dev/packages/hooks_riverpod"},"hooks_riverpod"),", an alternative to ",Object(o.b)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ConsumerWidget-class.html"},"ConsumerWidget"),"\nis to use ","[ref.watch(]","."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-dart"},"class Count extends HookConsumerWidget {\n  @override\n  Widget build(BuildContext context) {\n    int count = ref.watch(counterProvider).state;\n    return Text('$count');\n  }\n}\n")),Object(o.b)("p",null,"This can be useful when you want to use both ",Object(o.b)("a",{parentName:"p",href:"https://github.com/rrousselGit/flutter_hooks"},"flutter_hooks")," and ",Object(o.b)("a",{parentName:"p",href:"https://github.com/rrousselgit/river_pod"},"Riverpod")," together.",Object(o.b)("br",{parentName:"p"}),"\n","This syntax also supports a feature that are not supported by ",Object(o.b)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ConsumerWidget-class.html"},"ConsumerWidget"),": ","[select]"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-dart"},"class Example extends HookConsumerWidget {\n  @override\n  Widget build(BuildContext context) {\n    bool isAbove5 = ref.watch(counterProvider.select((s) => s.state > 5));\n    return Text('Is counter > 5 ? $isAbove5');\n  }\n}\n")),Object(o.b)("p",null,"Using this syntax, our widget will rebuild ",Object(o.b)("em",{parentName:"p"},"only")," if the ",Object(o.b)("inlineCode",{parentName:"p"},"isAbove5")," variable changes.\nWhich means that if the counter changes from ",Object(o.b)("inlineCode",{parentName:"p"},"1")," to ",Object(o.b)("inlineCode",{parentName:"p"},"2"),", this will ",Object(o.b)("em",{parentName:"p"},"not"),"\ncause our widget to rebuild."),Object(o.b)("h3",{id:"contextreadmyprovider"},"context.read(myProvider)"),Object(o.b)("p",null,"With ",Object(o.b)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/Consumer-class.html"},"Consumer")," and ","[ref.watch]",", we've seen how to ",Object(o.b)("em",{parentName:"p"},"listen")," to a provider."),Object(o.b)("p",null,"But in some situations, there's no value in listening to the object. For example,\nwe may need the object only for the ",Object(o.b)("inlineCode",{parentName:"p"},"onPressed")," of a ",Object(o.b)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/material/ElevatedButton-class.html"},"ElevatedButton"),"."),Object(o.b)("p",null,"We ",Object(o.b)("em",{parentName:"p"},"could")," use ","[ref.watch]","/",Object(o.b)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/Consumer-class.html"},"Consumer"),":"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-dart",metastring:"{2,4}","{2,4}":!0},"Consumer(builder: (context, ref, _) {\n  StateController<int> counter = ref.watch(counterProvider);\n  return ElevatedButton(\n    onPressed: () => counter.state++,\n    child: Text('increment'),\n  )\n});\n")),Object(o.b)("p",null,"But that is not efficient. Depending on the provider listened, this\ncould cause the ",Object(o.b)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/material/ElevatedButton-class.html"},"ElevatedButton")," to rebuild when the counter changes,\neven when the counter isn't actually used to ",Object(o.b)("em",{parentName:"p"},"build")," the ",Object(o.b)("a",{parentName:"p",href:"https://api.flutter.dev/flutter/material/ElevatedButton-class.html"},"ElevatedButton"),"."),Object(o.b)("p",null,"That's where ",Object(o.b)("inlineCode",{parentName:"p"},"context.read(myProvider)")," is a solution."),Object(o.b)("p",null,"Using it, we could refactor our previous code to:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-dart",metastring:"{4}","{4}":!0},"@override\nWidget build(BuildContext context) {\n  return ElevatedButton(\n    onPressed: () => context.read(counterProvider).state++,\n    child: Text('increment'),\n  );\n}\n")),Object(o.b)("p",null,"By doing so, clicking on our button still increments the counter. But we\nare no-longer listening to the provider, which avoids unnecessary rebuilds."),Object(o.b)("blockquote",null,Object(o.b)("p",{parentName:"blockquote"},"I don't see the ",Object(o.b)("inlineCode",{parentName:"p"},"context.read")," method, why is that?")),Object(o.b)("p",null,"If you do not see ",Object(o.b)("inlineCode",{parentName:"p"},"context.read"),", it is likely that you did not import the correct\npackage.\nTo see this method, you must import either ",Object(o.b)("inlineCode",{parentName:"p"},"package:flutter_riverpod")," or ",Object(o.b)("inlineCode",{parentName:"p"},"package:hooks_riverpod"),"."),Object(o.b)("div",{className:"admonition admonition-info alert alert--info"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Depending on the provider that you are listening to, you may not need to do this.",Object(o.b)("br",{parentName:"p"}),"\n","For example, ",Object(o.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/StateNotifierProvider-class.html"},"StateNotifierProvider")," has a built-in way obtain a ",Object(o.b)("a",{parentName:"p",href:"https://pub.dev/documentation/state_notifier/latest/state_notifier/StateNotifier-class.html"},"StateNotifier"),"\nwithout listening to its state:"),Object(o.b)("pre",{parentName:"div"},Object(o.b)("code",{parentName:"pre",className:"language-dart"},"class Counter extends StateNotifier<int> {\n  Counter(): super(0);\n\n  void increment() => state++;\n}\n\nfinal counterProvider = StateNotifierProvider((ref) => Counter());\n\n// ...\n\n@override\nWidget build(BuildContext context, WidgetRef ref) {\n  // Obtains Counter without listening to Counter.state.\n  // Will not cause the button to rebuild when the counter changes.\n  final Counter counter = ref.watch(counterProvider);\n\n  return ElevatedButton(\n    onPressed: counter.increment,\n    child: Text('increment'),\n  );\n}\n")))),Object(o.b)("div",{className:"admonition admonition-caution alert alert--warning"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Avoid calling ",Object(o.b)("inlineCode",{parentName:"p"},"context.read")," inside the ",Object(o.b)("inlineCode",{parentName:"p"},"build")," method of a Widget.",Object(o.b)("br",{parentName:"p"}),"\n","If you want to optimize rebuilds, extract the value listened in a ",Object(o.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/Provider-class.html"},"Provider")," instead."))),Object(o.b)("h3",{id:"providerlistener"},"ProviderListener"),Object(o.b)("p",null,"In some situations, you may want to your Widget tree to push a route or show\na dialog after a change on a provider."),Object(o.b)("p",null,"Such behavior would be implemented using the ",Object(o.b)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ProviderListener-class.html"},"ProviderListener")," Widget."),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-dart"},"Widget build(BuildContext context) {\n  return ProviderListener<StateController<int>>(\n    provider: counterProvider,\n    onChange: (context, counter) {\n      if (counter.state == 5) {\n        showDialog(...);\n      }\n    },\n    child: Whatever(),\n  );\n}\n")),Object(o.b)("p",null,"This will show a dialog when the counter reaches 5."),Object(o.b)("h2",{id:"reading-a-provider-inside-another-provider"},"Reading a provider inside another provider"),Object(o.b)("p",null,"A common use-case when making providers is to want to create an object from other\nobjects.",Object(o.b)("br",{parentName:"p"}),"\n","For example, we may want to create a ",Object(o.b)("inlineCode",{parentName:"p"},"UserController")," from a ",Object(o.b)("inlineCode",{parentName:"p"},"UserRepository"),",\nwhere both objects would be exposed in a different provider."),Object(o.b)("p",null,"Such scenario is possible by using the ",Object(o.b)("inlineCode",{parentName:"p"},"ref")," object that providers receives as\nparameter:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-dart"},"final userRepositoryProvider = Provider((ref) => UserRepository());\n\nfinal userControllerProvider = StateNotifierProvider((ref) {\n  return UserController(\n    // Read userRepositoryProvider and create a UserController from the result\n    repository: ref.watch(userRepositoryProvider),\n  );\n});\n")),Object(o.b)("p",null,"Make sure to check out the ",Object(o.b)("a",{parentName:"p",href:"/docs/concepts/combining_providers"},"Combining Providers")," guide for\nmore informations such as:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"What happens if I create an object from a value which can change over time?"),Object(o.b)("li",{parentName:"ul"},"Some good practices tips")),Object(o.b)("h2",{id:"reading-a-provider-outside-of-providers-using-dart-only"},"Reading a provider outside of providers using Dart only"),Object(o.b)("p",null,"In some scenarios, you may want to read a provider in a package that has no\ndependency on Flutter.",Object(o.b)("br",{parentName:"p"}),"\n","A common use-case is to test a class unrelated to widgets."),Object(o.b)("p",null,"In this situation, you can use ",Object(o.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/ProviderContainer-class.html"},"ProviderContainer"),", which is a low-level\nutility to manipulate providers."),Object(o.b)("p",null,"The following snippet demonstrates how a test can read providers without using Flutter:"),Object(o.b)("pre",null,Object(o.b)("code",{parentName:"pre",className:"language-dart"},"test('counter starts at 0', () {\n  final container = ProviderContainer();\n\n  StateController<int> counter = container.read(counterProvider);\n  expect(counter.state, 0);\n});\n")),Object(o.b)("div",{className:"admonition admonition-danger alert alert--danger"},Object(o.b)("div",{parentName:"div",className:"admonition-heading"},Object(o.b)("h5",{parentName:"div"},Object(o.b)("span",{parentName:"h5",className:"admonition-icon"},Object(o.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},Object(o.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M5.05.31c.81 2.17.41 3.38-.52 4.31C3.55 5.67 1.98 6.45.9 7.98c-1.45 2.05-1.7 6.53 3.53 7.7-2.2-1.16-2.67-4.52-.3-6.61-.61 2.03.53 3.33 1.94 2.86 1.39-.47 2.3.53 2.27 1.67-.02.78-.31 1.44-1.13 1.81 3.42-.59 4.78-3.42 4.78-5.56 0-2.84-2.53-3.22-1.25-5.61-1.52.13-2.03 1.13-1.89 2.75.09 1.08-1.02 1.8-1.86 1.33-.67-.41-.66-1.19-.06-1.78C8.18 5.31 8.68 2.45 5.05.32L5.03.3l.02.01z"}))),"danger")),Object(o.b)("div",{parentName:"div",className:"admonition-content"},Object(o.b)("p",{parentName:"div"},"Do not reuse the instance of ",Object(o.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/ProviderContainer-class.html"},"ProviderContainer")," between tests.",Object(o.b)("br",{parentName:"p"}),"\n","This ensures that the state of your providers properly resets between test cases."))))}l.isMDXComponent=!0},94:function(e,t,n){"use strict";function r(e){var t,n,a="";if("string"==typeof e||"number"==typeof e)a+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(a&&(a+=" "),a+=n);else for(t in e)e[t]&&(a&&(a+=" "),a+=t);return a}t.a=function(){for(var e,t,n=0,a="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(a&&(a+=" "),a+=t);return a}},96:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var d=a.a.createContext({}),l=function(e){var t=a.a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=l(e.components);return a.a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},b=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,d=c(e,["components","mdxType","originalType","parentName"]),p=l(n),b=r,m=p["".concat(i,".").concat(b)]||p[b]||u[b]||o;return n?a.a.createElement(m,s(s({ref:t},d),{},{components:n})):a.a.createElement(m,s({ref:t},d))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=b;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var d=2;d<o;d++)i[d]=n[d];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},97:function(e,t,n){"use strict";var r=n(0),a=n(98);t.a=function(){const e=Object(r.useContext)(a.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},98:function(e,t,n){"use strict";var r=n(0);const a=Object(r.createContext)(void 0);t.a=a}}]);