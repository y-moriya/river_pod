(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{100:function(e,t,n){"use strict";var r=n(0),o=n.n(r),i=n(97),a=n(94),s=n(56),d=n.n(s);const l=37,c=39;t.a=function(e){const{lazy:t,block:n,defaultValue:s,values:p,groupId:u,className:b}=e,{tabGroupChoices:v,setTabGroupChoices:h}=Object(i.a)(),[m,f]=Object(r.useState)(s),g=r.Children.toArray(e.children),y=[];if(null!=u){const e=v[u];null!=e&&e!==m&&p.some((t=>t.value===e))&&f(e)}const O=e=>{const t=e.target,n=y.indexOf(t),r=g[n].props.value;f(r),null!=u&&(h(u,r),setTimeout((()=>{(function(e){const{top:t,left:n,bottom:r,right:o}=e.getBoundingClientRect(),{innerHeight:i,innerWidth:a}=window;return t>=0&&o<=a&&r<=i&&n>=0})(t)||(t.scrollIntoView({block:"center",behavior:"smooth"}),t.classList.add(d.a.tabItemActive),setTimeout((()=>t.classList.remove(d.a.tabItemActive)),2e3))}),150))},w=e=>{var t;let n;switch(e.keyCode){case c:{const t=y.indexOf(e.target)+1;n=y[t]||y[0];break}case l:{const t=y.indexOf(e.target)-1;n=y[t]||y[y.length-1];break}}null===(t=n)||void 0===t||t.focus()};return o.a.createElement("div",{className:"tabs-container"},o.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(a.a)("tabs",{"tabs--block":n},b)},p.map((({value:e,label:t})=>o.a.createElement("li",{role:"tab",tabIndex:m===e?0:-1,"aria-selected":m===e,className:Object(a.a)("tabs__item",d.a.tabItem,{"tabs__item--active":m===e}),key:e,ref:e=>y.push(e),onKeyDown:w,onFocus:O,onClick:O},t)))),t?Object(r.cloneElement)(g.filter((e=>e.props.value===m))[0],{className:"margin-vert--md"}):o.a.createElement("div",{className:"margin-vert--md"},g.map(((e,t)=>Object(r.cloneElement)(e,{key:t,hidden:e.props.value!==m})))))}},101:function(e,t,n){"use strict";var r=n(0),o=n.n(r);t.a=function({children:e,hidden:t,className:n}){return o.a.createElement("div",{role:"tabpanel",hidden:t,className:n},e)}},82:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return d})),n.d(t,"metadata",(function(){return l})),n.d(t,"toc",(function(){return c})),n.d(t,"default",(function(){return u}));var r=n(3),o=n(8),i=(n(0),n(96)),a=n(100),s=n(101),d={title:"Testing"},l={unversionedId:"cookbooks/testing",id:"cookbooks/testing",isDocsHomePage:!1,title:"Testing",description:"For any medium to large-scaled applications, it is critical to test the application.",source:"@site/docs/cookbooks/testing.mdx",slug:"/cookbooks/testing",permalink:"/docs/cookbooks/testing",editUrl:"https://github.com/y-moriya/river_pod/edit/master/website/docs/cookbooks/testing.mdx",version:"current",sidebar:"Sidebar",previous:{title:"Getting started",permalink:"/docs/getting_started"},next:{title:"Providers",permalink:"/docs/concepts/providers"}},c=[{value:"No state should be preserved between <code>test</code>/<code>testWidgets</code>.",id:"no-state-should-be-preserved-between-testtestwidgets",children:[]},{value:"Overriding the behavior of a provider during tests.",id:"overriding-the-behavior-of-a-provider-during-tests",children:[]},{value:"Full widget test example",id:"full-widget-test-example",children:[]}],p={toc:c};function u(e){var t=e.components,n=Object(o.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("p",null,"For any medium to large-scaled applications, it is critical to test the application."),Object(i.b)("p",null,"To be able to successfully test our application, we will want the following things:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"No state should be preserved between ",Object(i.b)("inlineCode",{parentName:"p"},"test"),"/",Object(i.b)("inlineCode",{parentName:"p"},"testWidgets"),".",Object(i.b)("br",{parentName:"p"}),"\n","This means no global state, or all global-states should be reset after each test.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Being able to force our providers to have a specific state, either through\nmocking or through manipulating them until we reach the desired state."))),Object(i.b)("p",null,"Let's see one by one how ",Object(i.b)("a",{parentName:"p",href:"https://github.com/rrousselgit/river_pod"},"Riverpod")," helps you with these."),Object(i.b)("h2",{id:"no-state-should-be-preserved-between-testtestwidgets"},"No state should be preserved between ",Object(i.b)("inlineCode",{parentName:"h2"},"test"),"/",Object(i.b)("inlineCode",{parentName:"h2"},"testWidgets"),"."),Object(i.b)("p",null,"Since providers are usually declared as global variables, you might worry about\nthat one.",Object(i.b)("br",{parentName:"p"}),"\n","After all, global state makes testing very difficult, because it can require\nlengthy ",Object(i.b)("inlineCode",{parentName:"p"},"setUp"),"/",Object(i.b)("inlineCode",{parentName:"p"},"tearDown"),"."),Object(i.b)("p",null,"But the reality is: While providers are declared as globals, the state of a provider\nis ",Object(i.b)("strong",{parentName:"p"},"not")," global."),Object(i.b)("p",null,"Instead, it is stored in an object named ",Object(i.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/ProviderContainer-class.html"},"ProviderContainer"),", that you may have\nseen if you've read the dart-only examples.",Object(i.b)("br",{parentName:"p"}),"\n","If you haven't, know that this ",Object(i.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/ProviderContainer-class.html"},"ProviderContainer")," object is implicitly created\nby ",Object(i.b)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ProviderScope-class.html"},"ProviderScope"),", the widget that enables ",Object(i.b)("a",{parentName:"p",href:"https://github.com/rrousselgit/river_pod"},"Riverpod")," on our project."),Object(i.b)("p",null,"Concretely what this means is, two ",Object(i.b)("inlineCode",{parentName:"p"},"testWidgets")," using providers do not share\nany state.",Object(i.b)("br",{parentName:"p"}),"\n","As such, there is no need for any ",Object(i.b)("inlineCode",{parentName:"p"},"setUp"),"/",Object(i.b)("inlineCode",{parentName:"p"},"tearDown")," at all."),Object(i.b)("p",null,"But an example is better than lengthy explanations:"),Object(i.b)(a.a,{defaultValue:"testWidgets",values:[{label:"testWidgets (Flutter)",value:"testWidgets"},{label:"test (Dart only)",value:"test"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"testWidgets",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-dart"},"// A Counter implemented and tested using Flutter\n\n// We declared a provider globally, and we will use it in two tests, to see\n// if the state correctly resets to `0` between tests.\nfinal counterProvider = StateProvider((ref) => 0);\n\n// Renders the current state and a button that allows incrementing the state\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      home: Consumer(builder: (context, ref, _) {\n        final counter = ref.watch(counterProvider);\n        return RaisedButton(\n          onPressed: () => counter.state++,\n          child: Text('${counter.state}'),\n        );\n      }),\n    );\n  }\n}\n\nvoid main() {\n  testWidgets('update the UI when incrementing the state', (tester) async {\n    await tester.pumpWidget(ProviderScope(child: MyApp()));\n\n    // The default value is `0`, as declared in our provider\n    expect(find.text('0'), findsOneWidget);\n    expect(find.text('1'), findsNothing);\n\n    // Increment the state and re-render\n    await tester.tap(find.byType(RaisedButton));\n    await tester.pump();\n\n    // The state have properly incremented\n    expect(find.text('1'), findsOneWidget);\n    expect(find.text('0'), findsNothing);\n  });\n\n  testWidgets('the counter state is not shared between tests', (tester) async {\n    await tester.pumpWidget(ProviderScope(child: MyApp()));\n\n    // The state is `0` once again, with no tearDown/setUp needed\n    expect(find.text('0'), findsOneWidget);\n    expect(find.text('1'), findsNothing);\n  });\n}\n"))),Object(i.b)(s.a,{value:"test",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-dart"},"// A Counter implemented and tested with Dart only (no dependency on Flutter)\n\n// We declared a provider globally, and we will use it in two tests, to see\n// if the state correctly resets to `0` between tests.\nfinal counterProvider = StateProvider((ref) => 0);\n\n// Using mockito to keep track of when a provider notify its listeners\nclass Listener extends Mock {\n  void call(int value);\n}\n\nvoid main() {\n  test('defaults to 0 and notify listeners when value changes', () {\n    // An object that will allow us to read providers\n    // Do not share this between tests.\n    final container = ProviderContainer();\n    addTearDown(container.dispose);\n    final listener = Listener();\n\n    // Observe a provider and spy the changes.\n    container.listen<StateController<int>>(\n      counterProvider,\n      didChange: (sub) => listener(sub.read().state),\n    );\n\n    // the listener is called immediatly with 0, the default value\n    verify(listener(0)).called(1);\n    verifyNoMoreInteractions(listener);\n\n    // We increment the value\n    container.read(counterProvider).state++;\n\n    // The listener was called again, but with 1 this time\n    verify(listener(1)).called(1);\n    verifyNoMoreInteractions(listener);\n  });\n\n  test('the counter state is not shared between tests', () {\n    // We use a different ProviderContainer to read our provider.\n    // This unsure that no state is reused between tests\n    final container = ProviderContainer();\n    addTearDown(container.dispose);\n    final listener = Listener();\n\n    container.listen<StateController<int>>(\n      counterProvider,\n      didChange: (sub) => listener(sub.read().state),\n    );\n\n    // The new test correcly uses the default value: 0\n    verify(listener(0)).called(1);\n    verifyNoMoreInteractions(listener);\n  });\n}\n")))),Object(i.b)("p",null,"As you can see, while ",Object(i.b)("inlineCode",{parentName:"p"},"counterProvider")," was declared as a global, no state was\nshared between tests.",Object(i.b)("br",{parentName:"p"}),"\n","As such, we do not have to worry about our tests potentially behaving differently\nif executed in a different order, since they are running in complete isolation."),Object(i.b)("h2",{id:"overriding-the-behavior-of-a-provider-during-tests"},"Overriding the behavior of a provider during tests."),Object(i.b)("p",null,"A common real-world application may have the following objects:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"It will have a ",Object(i.b)("inlineCode",{parentName:"p"},"Repository")," class, which provides a type-safe and simple API\nto perform HTTP requests.")),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"An object that manages the application state, and may use ",Object(i.b)("inlineCode",{parentName:"p"},"Repository")," to perform\nHTTP requests based on different factors.",Object(i.b)("br",{parentName:"p"}),"\n","This may be a ",Object(i.b)("inlineCode",{parentName:"p"},"ChangeNotifier"),", ",Object(i.b)("inlineCode",{parentName:"p"},"Bloc"),", or even a provider."))),Object(i.b)("p",null,"Using ",Object(i.b)("a",{parentName:"p",href:"https://github.com/rrousselgit/river_pod"},"Riverpod"),", this may be represented as follows:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-dart"},"class Repository {\n  Future<List<Todo>> fetchTodos() async {}\n}\n\n// We expose our instance of Repository in a provider\nfinal repositoryProvider = Provider((ref) => Repository());\n\n/// The list of todos. Here, we are simply fetching them from the server using\n/// [Repository] and doing nothing else.\nfinal todoListProvider = FutureProvider((ref) async {\n  // Obtains the Repository instance\n  final repository = ref.read(repositoryProvider);\n\n  // Fetch the todos and expose them to the UI.\n  return repository.fetchTodos();\n});\n")),Object(i.b)("p",null,"In this situation, when making a unit/widget test, we will typically want to\nreplace our ",Object(i.b)("inlineCode",{parentName:"p"},"Repository")," instance with a fake implementation that returns\na pre-defined response instead of making a real HTTP request."),Object(i.b)("p",null,"We will then want our ",Object(i.b)("inlineCode",{parentName:"p"},"todoListProvider")," or equivalent to use the mocked implementation\nof ",Object(i.b)("inlineCode",{parentName:"p"},"Repository"),"."),Object(i.b)("p",null,"To achieve this, we can use the ",Object(i.b)("inlineCode",{parentName:"p"},"overrides")," parameter of ",Object(i.b)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ProviderScope-class.html"},"ProviderScope"),"/",Object(i.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/ProviderContainer-class.html"},"ProviderContainer"),"\nto override the behavior of ",Object(i.b)("inlineCode",{parentName:"p"},"repositoryProvider"),":"),Object(i.b)(a.a,{defaultValue:"ProviderScope",values:[{label:"ProviderScope (Flutter)",value:"ProviderScope"},{label:"ProviderContainer (Dart only)",value:"ProviderContainer"}],mdxType:"Tabs"},Object(i.b)(s.a,{value:"ProviderScope",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-dart",metastring:"{7}","{7}":!0},"testWidgets('override repositoryProvider', (tester) async {\n  await tester.pumpWidget(\n    ProviderScope(\n      overrides: [\n        // Override the behavior of repositoryProvider to return\n        // FakeRepository instead of Repository.\n        repositoryProvider.overrideWithProvider(Provider((ref) => FakeRepository()))\n        // We do not have to override `todoListProvider`, it will automatically\n        // use the overriden repositoryProvider\n      ],\n      child: MyApp(),\n    ),\n  );\n}\n"))),Object(i.b)(s.a,{value:"ProviderContainer",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-dart",metastring:"{6}","{6}":!0},"test('override repositoryProvider', () async {\n  final container = ProviderContainer(\n    overrides: [\n      // Override the behavior of repositoryProvider to return\n      // FakeRepository instead of Repository.\n      repositoryProvider.overrideWithProvider(Provider((ref) => FakeRepository()))\n      // We do not have to override `todoListProvider`, it will automatically\n      // use the overriden repositoryProvider\n    ],\n  );\n\n  // The first read if the loading state\n  expect(\n    container.read(todoListProvider),\n    const AsyncValue<List<Todo>>.loading(),\n  );\n\n  /// Wait for the request to finish\n  await Future<void>.value();\n\n  // Exposes the data fetched\n  expect(container.read(todoListProvider).data.value, [\n    isA<Todo>()\n        .having((s) => s.id, 'id', '42')\n        .having((s) => s.label, 'label', 'Hello world')\n        .having((s) => s.completed, 'completed', false),\n  ]);\n});\n")))),Object(i.b)("p",null,"As you can see by the highlighted code, ",Object(i.b)("a",{parentName:"p",href:"https://pub.dev/documentation/flutter_riverpod/latest/flutter_riverpod/ProviderScope-class.html"},"ProviderScope"),"/",Object(i.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/ProviderContainer-class.html"},"ProviderContainer"),"\nallows replacing the implementation of a provider with a different behavior."),Object(i.b)("div",{className:"admonition admonition-info alert alert--info"},Object(i.b)("div",{parentName:"div",className:"admonition-heading"},Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",{parentName:"h5",className:"admonition-icon"},Object(i.b)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},Object(i.b)("path",{parentName:"svg",fillRule:"evenodd",d:"M7 2.3c3.14 0 5.7 2.56 5.7 5.7s-2.56 5.7-5.7 5.7A5.71 5.71 0 0 1 1.3 8c0-3.14 2.56-5.7 5.7-5.7zM7 1C3.14 1 0 4.14 0 8s3.14 7 7 7 7-3.14 7-7-3.14-7-7-7zm1 3H6v5h2V4zm0 6H6v2h2v-2z"}))),"info")),Object(i.b)("div",{parentName:"div",className:"admonition-content"},Object(i.b)("p",{parentName:"div"},"Some providers expose simplified ways to override their behavior.",Object(i.b)("br",{parentName:"p"}),"\n","For example, ",Object(i.b)("a",{parentName:"p",href:"https://pub.dev/documentation/riverpod/latest/riverpod/FutureProvider-class.html"},"FutureProvider")," allows overriding the provider with an ",Object(i.b)("inlineCode",{parentName:"p"},"AsyncValue"),":"),Object(i.b)("pre",{parentName:"div"},Object(i.b)("code",{parentName:"pre",className:"language-dart"},"final todoListProvider = FutureProvider((ref) async => <Todo>[]);\n// ...\nProviderScope(\n  overrides: [\n    /// Allows overriding a FutureProvider to return a fixed value\n    todoListProvider.debugOverrideWithValue(\n      AsyncValue.data([Todo(id: '42', label: 'Hello', completed: true)]),\n    ),\n  ],\n  child: MyApp(),\n);\n")))),Object(i.b)("h2",{id:"full-widget-test-example"},"Full widget test example"),Object(i.b)("p",null,"Wrapping up, here is the entire full code for our Flutter test."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-dart"},"import 'package:flutter/material.dart';\nimport 'package:flutter_riverpod/flutter_riverpod.dart';\nimport 'package:flutter_test/flutter_test.dart';\n\nclass Repository {\n  Future<List<Todo>> fetchTodos() async {}\n}\n\nclass Todo {\n  Todo({\n    required this.id,\n    required this.label,\n    required this.completed,\n  });\n\n  final String id;\n  final String label;\n  final bool completed;\n}\n\n// We expose our instance of Repository in a provider\nfinal repositoryProvider = Provider((ref) => Repository());\n\n/// The list of todos. Here, we are simply fetching them from the server using\n/// [Repository] and doing nothing else.\nfinal todoListProvider = FutureProvider((ref) async {\n  // Obtains the Repository instance\n  final repository = ref.read(repositoryProvider);\n\n  // Fetch the todos and expose them to the UI.\n  return repository.fetchTodos();\n});\n\n/// A mocked implementation of Repository that returns a pre-defined list of todos\nclass FakeRepository implements Repository {\n  @override\n  Future<List<Todo>> fetchTodos() async {\n    return [\n      Todo(id: '42', label: 'Hello world', completed: false),\n    ];\n  }\n}\n\nclass TodoItem extends StatelessWidget {\n  const TodoItem({Key? key, required this.todo}) : super(key: key);\n  final Todo todo;\n  @override\n  Widget build(BuildContext context) {\n    return Text(todo.label);\n  }\n}\n\nvoid main() {\n  testWidgets('override repositoryProvider', (tester) async {\n    await tester.pumpWidget(\n      ProviderScope(\n        overrides: [\n          repositoryProvider.overrideWithProvider(Provider((ref) => FakeRepository()))\n        ],\n        // Our application, which will read from todoListProvider to display the todo-list.\n        // You may extract this into a MyApp widget\n        child: MaterialApp(\n          home: Scaffold(\n            body: Consumer(builder: (context, ref, _) {\n              final todos = ref.watch(todoListProvider);\n              // The list of todos is loading or in error\n              if (todos.data == null) {\n                return const CircularProgressIndicator();\n              }\n              return ListView(\n                children: [\n                  for (final todo in todos.data.value) TodoItem(todo: todo)\n                ],\n              );\n            }),\n          ),\n        ),\n      ),\n    );\n\n    // The first frame is a loading state.\n    expect(find.byType(CircularProgressIndicator), findsOneWidget);\n\n    // Re-render. TodoListProvider should have finished fetching the todos by now\n    await tester.pump();\n\n    // No-longer loading\n    expect(find.byType(CircularProgressIndicator), findsNothing);\n\n    // Rendered one TodoItem with the data returned by FakeRepository\n    expect(tester.widgetList(find.byType(TodoItem)), [\n      isA<TodoItem>()\n          .having((s) => s.todo.id, 'todo.id', '42')\n          .having((s) => s.todo.label, 'todo.label', 'Hello world')\n          .having((s) => s.todo.completed, 'todo.completed', false),\n    ]);\n  });\n}\n")))}u.isMDXComponent=!0},94:function(e,t,n){"use strict";function r(e){var t,n,o="";if("string"==typeof e||"number"==typeof e)o+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=r(e[t]))&&(o&&(o+=" "),o+=n);else for(t in e)e[t]&&(o&&(o+=" "),o+=t);return o}t.a=function(){for(var e,t,n=0,o="";n<arguments.length;)(e=arguments[n++])&&(t=r(e))&&(o&&(o+=" "),o+=t);return o}},96:function(e,t,n){"use strict";n.d(t,"a",(function(){return p})),n.d(t,"b",(function(){return v}));var r=n(0),o=n.n(r);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function d(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=o.a.createContext({}),c=function(e){var t=o.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=c(e.components);return o.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return o.a.createElement(o.a.Fragment,{},t)}},b=o.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,a=e.parentName,l=d(e,["components","mdxType","originalType","parentName"]),p=c(n),b=r,v=p["".concat(a,".").concat(b)]||p[b]||u[b]||i;return n?o.a.createElement(v,s(s({ref:t},l),{},{components:n})):o.a.createElement(v,s({ref:t},l))}));function v(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,a=new Array(i);a[0]=b;var s={};for(var d in t)hasOwnProperty.call(t,d)&&(s[d]=t[d]);s.originalType=e,s.mdxType="string"==typeof e?e:r,a[1]=s;for(var l=2;l<i;l++)a[l]=n[l];return o.a.createElement.apply(null,a)}return o.a.createElement.apply(null,n)}b.displayName="MDXCreateElement"},97:function(e,t,n){"use strict";var r=n(0),o=n(98);t.a=function(){const e=Object(r.useContext)(o.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},98:function(e,t,n){"use strict";var r=n(0);const o=Object(r.createContext)(void 0);t.a=o}}]);